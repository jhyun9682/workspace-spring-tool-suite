<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<!-- target object[core concern] -->
	<bean id="userDao" class="com.itwill.user.UserDaoImpl"/>
	<bean id="userService"  class="com.itwill.user.UserServiceImpl">
		<property name="userDao" ref="userDao"/>
	</bean>
	
	<!-- Advice [crosscutting concern]-->
	<bean id="loggingBeforeAdvice" 
		class="com.itwill3.aop.spring.LoggingBeforeAdvice"/>
	
	<bean id="profilingAroudAdvice" 
		class="com.itwill3.aop.spring.ProfilingAroundAdvice"/>
	
	<bean id="emailSendAfterThrowingAdvice" 
		class="com.itwill3.aop.spring.EmailSendAfterThrowingAdvice"/>
				
	<!-- weaving[target + advice ]-->
	
	<aop:aspectj-autoproxy/>
	
	<aop:config>
		 <aop:pointcut 
		 	id="loggingBeforePointCut"
		 	expression="execution(public java.util.List com.itwill.user.UserService.findUserList())" />
		 	
		 <aop:aspect ref="loggingBeforeAdvice">
		 	<aop:before method="beforeLog" pointcut-ref="loggingBeforePointCut"/>
		 </aop:aspect>
		
		<aop:aspect ref="profilingAroudAdvice">
			<aop:around method="aroundProfiling" pointcut="execution(* com.itwill.user.UserService.*(..))"/>
		</aop:aspect>
		 
		<aop:aspect ref="emailSendAfterThrowingAdvice">
			<aop:after-throwing method="emailSend" throwing="exObj" pointcut="execution(* com.itwill.user.*.*(..))"/>
		</aop:aspect>
		
	</aop:config>
	
	<!--
		<< pointcut expression >>
		
		execution("수식어 리턴타입 패키지명.클래스명.메서드명(파라미터)")
 				명시자 표현식을 위와 같은 순서로 형식으로 입력합니다. 
 				'*'은 나타낼 수 있는 모든 값을 나타내고 '..' 하나 이상의 값을 나타냅니다.
		
		execution(* com.itwill.user.UserService.findUserList())
		execution(* com.itwill.user.UserService.find*(..))
		execution(* com.itwill.user.UserService.*(..))
		execution(* com.itwill.user.UserService.*(*,*))
		execution(* com.itwill.user.UserService.*(String,*))
		execution(* com.itwill.user.UserService.*(String,String))
		execution(* com.itwill.user.User*.*(..))
		execution(* com.itwill.user.*.*(..))
		execution(* com.itwill.*.*(..))
		execution(* *..UserDao.*(..))	
		
		execution(public Integer com.edu.aop.*.*(*)):com.edu.aop 패키지에 속해있고, 파라미터가 1개인 모든 메서드
		execution(* com.edu..*.get*(..)):com.edu 패키지 및 하위 패키지에 속해있고, 이름이 get으로 시작하는 파라미터가 0개 이상인 모든 메서드 
		execution(* com.edu.aop..*Service.*(..)):com.edu.aop 패키지 및 하위 패키지에 속해있고, 이름이 Service로 끝나는 인터페이스의 파라미터가 0개 이상인 모든 메서드
		execution(* com.edu.aop.BoardService.*(..)):com.edu.aop.BoardService 인터페이스에 속한 파마리터가 0개 이상인 모든 메서드
		execution(* some*(*, *)):메서드 이름이 some으로 시작하고 파라미터가 2개인 모든 메서드
		
		execution(public * *(..)) : public 메소드가 포인트 컷
		execution(* onj.spring.aop.*.*(..)) : onj.spring.aop 패키지의 모든 메소드가 포인트 컷
		execution(* onj.spring.aop..*.*(..)) : onj.spring.aop 패키지와 하위 패키지의 모든 메소드가 포인트 컷
		execution(public void insert*(..)) : public에 리턴값, 패키지명 없고 메서드 이름은 insert로 시작, 인자값은 0개 이상인 메서드가 포인트 컷
		execution(* onj.spring.aop.*.*()) : 리턴형 관계없고 onj.spring.aop 패키지의 모든 클래스, 인자값이 없는 모든 메서드가 포인트 컷
		execution(* onj.spring.aop..*.*(..)) : 리턴형 관계없고 onj.spring.aop 패키지 및 하위 패키지에 있는 모든 클래스,  인자값이 0개 이상인 메서드가 포인트 컷
		execution(* delete*(*)) : 메서드 이름이 delete으로 시작하는 인자값이 1개인 메서드가 포인트 컷
		execution(* delete*(*,*)) : 메서드 이름이 delete로 시작하는 인자값이 2개인 메서드가 포인트 컷
		execution(* onj*(Integer, ..)) : 메서드 이름이 onj로 시작하고 첫번째 인자값의 타입이 Integer, 1개 이상의 매개변수를 갖는 메서드가 포인트 컷
		within(onj.spring.aop.*) : onj.spring.aop 패키지 내의 모든 메소드가 포인트 컷
		within(onj.spring.aop..*) : onj.spring.aop패키지 및 하위 패키지의 모든 메소드가 포인트 컷
		bean(oraclejava*) : 이름이 oraclejava로 시작되는 모든 빈의 메소드가 포인트 컷
		bean(*dataSource) || bean(*DataSource) : 빈 이름이 “dataSource” 나 “DataSource” 으로 끝나는 모든 빈의 메소드가 포인트 컷
		!bean(onjoraclejava) : onjoraclejava빈을 제외한 모든 빈의 메소드가 포인트 컷
		
				
		within(some.package.SomeService):SomeService 인터페이스 내 모든 메서드 호출
		within(some.package.*):some.package 패키지 내 모든 메서드 호출
		within(some.package..*):some.package 패키지 및 하위 패키지 내 모든 메서드 호출
		bean(someServiceBean):이름이 someServiceBean인 빈의 메서드 호출
		bean(*Service):이름이 Service로 끝나는 빈의 메서드 호출
	 -->
</beans>











